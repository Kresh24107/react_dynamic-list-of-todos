{"version":3,"sources":["component/TodoItem.jsx","component/User.jsx","component/TodoList.jsx","App.jsx","serviceWorker.js","index.js"],"names":["TodoItem","props","react_default","a","createElement","className","title","completed","children","User","name","href","concat","email","username","TodoList","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","todos","users","sortBy","sort","bind","assertThisInitialized","e","_this2","target","dataset","sortType","sortedArr","b","localeCompare","setState","userId","_this3","data-sort-type","onClick","map","item","TodoItem_TodoItem","key","id","Component","App","data","urlUsers","urlTodos","status","showTodos","url","fetch","then","resp","json","urls","Promise","all","createPromise","getAllData","responses","parseData","dataArrs","usersToObj","init","reduce","acc","user","disabled","TodoList_TodoList","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f64fd115.chunk.js","sourcesContent":["import React from 'react';\r\nimport './TodoItem.css';\r\n\r\nexport default function TodoItem(props) {\r\n  return (\r\n    <div className=\"todo-item\">\r\n      <span className=\"todo-title\">{props.title}</span>\r\n      <span>{props.completed ? 'completed' : 'todo'}</span>\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nexport default function User(props) {\r\n  return (\r\n    <div className=\"user-info\">\r\n      <h3>{props.name}</h3>\r\n      <div>\r\n        <a href={`mailto:${props.email}`}>\r\n          {props.username}\r\n        </a>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from 'react';\r\nimport TodoItem from './TodoItem';\r\nimport User from './User';\r\nimport './TodoList.css';\r\n\r\nexport default class TodoList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      todos: this.props.todos,\r\n      users: this.props.users,\r\n      sortBy: 'time'\r\n    };\r\n    this.sort = this.sort.bind(this);\r\n  }\r\n\r\n  sort(e) {\r\n    if (e.target.dataset.sortType === 'title') {\r\n      const sortedArr = this.state.todos.sort((a, b) =>\r\n        a.title.localeCompare(b.title));\r\n      this.setState(() => ({\r\n        todos: sortedArr\r\n      }));\r\n    };\r\n\r\n    if (e.target.dataset.sortType === 'status') {\r\n      const sortedArr = this.state.todos.sort((a, b) => {\r\n        if (a.completed > b.completed) {\r\n          return 1;\r\n        }\r\n        if (a.completed < b.completed) {\r\n          return -1;\r\n        }\r\n        return 0;\r\n      });\r\n      this.setState(() => ({\r\n        todos: sortedArr\r\n      }));\r\n    };\r\n\r\n    if (e.target.dataset.sortType === 'name') {\r\n      const sortedArr = this.state.todos.sort((a, b) => {\r\n        if (this.state.users[a.userId].name > this.state.users[b.userId].name) {\r\n          return 1;\r\n        }\r\n        if (this.state.users[a.userId].name < this.state.users[b.userId].name) {\r\n          return -1;\r\n        }\r\n        return 0;\r\n      });\r\n      this.setState(() => ({\r\n        todos: sortedArr\r\n      }));\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"todo-list\">\r\n        <div className=\"sort-panel\">\r\n          Sort to:\r\n          <button data-sort-type=\"title\" onClick={this.sort}>Title</button>\r\n          <button data-sort-type=\"status\" onClick={this.sort}>status</button>\r\n          <button data-sort-type=\"name\" onClick={this.sort}>Name</button>\r\n        </div>\r\n        {this.props.todos.map(item =>\r\n          <TodoItem key={item.id} title={item.title} completed={item.completed}>\r\n            <User\r\n              name={this.state.users[item.userId].name}\r\n              username={this.state.users[item.userId].username}\r\n              email={this.state.users[item.userId].email} />\r\n          </TodoItem>)}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\nimport TodoList from './component/TodoList';\nimport './App.css';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.data = [this.props.urlUsers, this.props.urlTodos];\n    this.state = {\n      todos: [],\n      users: [],\n      status: 'before download'\n    };\n    this.showTodos = this.showTodos.bind(this);\n  }\n\n  createPromise(url) {\n    return fetch(url).then(resp => resp.json());\n  }\n\n  getAllData(urls) {\n    return Promise.all(urls.map(url => this.createPromise(url)));\n  }\n\n  init() {\n    this.getAllData(this.data).then(responses => this.parseData(responses));\n  }\n\n  parseData(dataArrs) {\n    const todos = dataArrs[1];\n    const users = this.usersToObj(dataArrs[0]);\n    this.setState(() => ({\n      todos: todos,\n      users: users,\n      status: 'redy to show'\n    }));\n  }\n\n  showTodos() {\n    this.setState(state => state.status = 'loading');\n    this.init();\n  }\n\n  usersToObj(users) {\n    const newObj = users.reduce(((acc, user) => {\n      acc[user.id] = user;\n      return acc;\n    }), {});\n    return newObj;\n  }\n\n  render() {\n    return (\n      <div>\n        {this.state.status === 'before download'\n          && <button className=\"download\" onClick={this.showTodos}>\n            Show Todos!</button>}\n        {this.state.status === 'loading'\n          && <button className=\"download\" disabled>Loading...</button>}\n        {this.state.status === 'redy to show'\n          && <TodoList todos={this.state.todos} users={this.state.users} />}\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst urlTodos = 'https://jsonplaceholder.typicode.com/todos';\nconst urlUsers = 'https://jsonplaceholder.typicode.com/users';\n\nReactDOM.render(<App urlTodos={urlTodos} urlUsers={urlUsers} />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}